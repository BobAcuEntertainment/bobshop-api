definitions:
  coin.Balance:
    properties:
      code:
        type: string
      free:
        type: number
      total:
        type: number
      used:
        type: number
    type: object
  coin.Currency:
    properties:
      active:
        type: boolean
      code:
        type: string
      currency_id:
        type: string
      currency_limits:
        $ref: '#/definitions/coin.CurrencyLimits'
      deposit:
        type: boolean
      fee:
        type: number
      margin:
        type: boolean
      name:
        type: string
      networks:
        additionalProperties:
          $ref: '#/definitions/coin.Network'
        type: object
      numeric_id:
        type: integer
      precision:
        type: number
      type:
        type: string
      withdraw:
        type: boolean
    type: object
  coin.CurrencyLimits:
    properties:
      amount:
        $ref: '#/definitions/coin.MinMax'
      withdraw:
        $ref: '#/definitions/coin.MinMax'
    type: object
  coin.Fee:
    properties:
      cost:
        type: number
      rate:
        type: number
    type: object
  coin.Market:
    properties:
      margin:
        type: boolean
      market_id:
        type: string
      spot:
        type: boolean
      symbol:
        type: string
      type:
        description: |-
          UppercaseId    string    `json:"uppercase_id"`
          LowercaseId    string    `json:"lowercase_id"`
          BaseCurrency   string    `json:"base_currency"`
          QuoteCurrency  string    `json:"quote_currency"`
          BaseId         string    `json:"base_id"`
          QuoteId        string    `json:"quote_id"`
          Active         bool      `json:"active"`
        type: string
    type: object
  coin.MinMax:
    properties:
      max:
        type: number
      min:
        type: number
    type: object
  coin.Network:
    properties:
      active:
        type: boolean
      currency_limits:
        $ref: '#/definitions/coin.CurrencyLimits'
      deposit:
        type: boolean
      fee:
        type: number
      network_id:
        type: string
      precision:
        type: number
      withdraw:
        type: boolean
    type: object
  coin.OHLCV:
    properties:
      close:
        type: number
      high:
        type: number
      low:
        type: number
      open:
        type: number
      timestamp:
        type: integer
      volume:
        type: number
    type: object
  coin.Order:
    properties:
      amount:
        type: number
      average:
        type: number
      client_order_id:
        type: string
      cost:
        type: number
      datetime:
        type: string
      fee:
        $ref: '#/definitions/coin.Fee'
      filled:
        type: number
      last_trade_timestamp:
        type: string
      order_id:
        type: string
      post_only:
        type: boolean
      price:
        type: number
      reduce_only:
        type: boolean
      remaining:
        type: number
      side:
        type: string
      status:
        type: string
      stop_loss_price:
        type: number
      symbol:
        type: string
      take_profit_price:
        type: number
      timestamp:
        type: integer
      trades:
        items:
          $ref: '#/definitions/coin.Trade'
        type: array
      trigger_price:
        type: number
      type:
        type: string
    type: object
  coin.OrderBook:
    properties:
      asks:
        items:
          items:
            type: number
          type: array
        type: array
      bids:
        items:
          items:
            type: number
          type: array
        type: array
      datetime:
        type: string
      nonce:
        type: integer
      symbol:
        type: string
      timestamp:
        type: integer
    type: object
  coin.Ticker:
    properties:
      ask:
        type: number
      ask_volume:
        type: number
      average:
        type: number
      base_volume:
        type: number
      bid:
        type: number
      bid_volume:
        type: number
      change:
        type: number
      close:
        type: number
      datetime:
        type: string
      high:
        type: number
      last:
        type: number
      low:
        type: number
      open:
        type: number
      percentage:
        type: number
      previous_close:
        type: number
      quote_volume:
        type: number
      symbol:
        type: string
      timestamp:
        type: integer
      vwap:
        type: number
    type: object
  coin.Trade:
    properties:
      amount:
        type: number
      cost:
        type: number
      datetime:
        type: string
      fee:
        $ref: '#/definitions/coin.Fee'
      id:
        type: string
      order:
        type: string
      price:
        type: number
      side:
        type: string
      symbol:
        type: string
      taker_or_maker:
        type: string
      timestamp:
        type: integer
      type:
        type: string
    type: object
  db.AuditLogCmsDto:
    properties:
      action:
        $ref: '#/definitions/enum.DataAction'
      data:
        $ref: '#/definitions/db.M'
      domain_id:
        example: 654db9eca1f1b1bdbf3d4617
        type: string
      log_id:
        example: 812db9eca1f1b1bdbf3d4617
        type: string
      method:
        example: GET
        type: string
      name:
        example: Role
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      url:
        example: /v1/cms/roles
        type: string
    type: object
  db.AuthChangePasswordData:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  db.AuthLoginData:
    properties:
      keycode:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - keycode
    - password
    - username
    type: object
  db.AuthRefreshTokenData:
    properties:
      keycode:
        type: string
      refresh_token:
        type: string
      username:
        type: string
    required:
    - keycode
    - refresh_token
    - username
    type: object
  db.AuthSessionDto:
    properties:
      access_token:
        type: string
      email:
        type: string
      is_root:
        type: boolean
      is_tenant:
        type: boolean
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        type: array
      phone:
        type: string
      tenant_id:
        type: string
      timezone:
        $ref: '#/definitions/tz.Timezone'
      user_id:
        type: string
      username:
        type: string
    type: object
  db.AuthTokenDto:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  db.ClientCmsData:
    properties:
      name:
        example: Aloha
        type: string
    required:
    - name
    type: object
  db.ClientCmsDto:
    properties:
      client_id:
        example: ogy64Ji1E4VY0S8b99oGDlDCRk5ZO3
        type: string
      client_secret:
        example: oSAa14Q1Ne6iSqVLs4nfG7p12K6cyv67PyV3L509
        type: string
      name:
        example: Aloha
        type: string
      secure_key:
        example: QX9f276HW4fyL38Jto0pi9WVa40yLRpW0jsKN033
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.CoinConfigAttributeInfo:
    properties:
      key:
        type: string
      value: {}
    required:
    - key
    - value
    type: object
  db.CoinConfigCmsData:
    properties:
      attributes:
        items:
          $ref: '#/definitions/db.CoinConfigAttributeInfo'
        type: array
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      description:
        type: string
      exchange:
        $ref: '#/definitions/enum.Exchange'
      margin_mode:
        $ref: '#/definitions/enum.MarginMode'
      market_type:
        $ref: '#/definitions/enum.MarketType'
      name:
        type: string
      sandbox:
        type: boolean
      strategy_id:
        example: 671db9eca1f1b1bdbf3d4627
        type: string
      symbols:
        example:
        - BTC/USDT
        items:
          type: string
        minItems: 1
        type: array
      trader_ids:
        example:
        - 671db9eca1f1b1bdbf3d4611
        items:
          type: string
        minItems: 1
        type: array
    required:
    - attributes
    - data_status
    - description
    - exchange
    - margin_mode
    - market_type
    - name
    - strategy_id
    - symbols
    - trader_ids
    type: object
  db.CoinConfigCmsDto:
    properties:
      attributes:
        items:
          $ref: '#/definitions/db.CoinConfigAttributeInfo'
        type: array
      config_id:
        example: 671dfc49f06ba89b1821cc5a
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      description:
        type: string
      exchange:
        $ref: '#/definitions/enum.Exchange'
      margin_mode:
        $ref: '#/definitions/enum.MarginMode'
      market_type:
        $ref: '#/definitions/enum.MarketType'
      name:
        type: string
      sandbox:
        type: boolean
      server:
        $ref: '#/definitions/db.CoinConfigServerInfo'
      strategy_id:
        example: 671db9eca1f1b1bdbf3d4627
        type: string
      symbols:
        example:
        - BTC/USDT
        items:
          type: string
        type: array
      trader_ids:
        example:
        - 671db9eca1f1b1bdbf3d4611
        items:
          type: string
        type: array
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.CoinConfigCredentialInfo:
    properties:
      api_key:
        type: string
      password:
        type: string
      secret:
        type: string
      trader_id:
        type: string
    type: object
  db.CoinConfigServerInfo:
    properties:
      message:
        type: string
      status:
        $ref: '#/definitions/enum.ServerStatus'
    required:
    - message
    - status
    type: object
  db.CoinConfigStrategyDto:
    properties:
      attributes:
        additionalProperties: {}
        type: object
      config_id:
        type: string
      credentials:
        items:
          $ref: '#/definitions/db.CoinConfigCredentialInfo'
        type: array
      exchange:
        $ref: '#/definitions/enum.Exchange'
      sandbox:
        type: boolean
      status:
        $ref: '#/definitions/enum.DataStatus'
      strategy_id:
        type: string
      tenant_id:
        type: string
    type: object
  db.CoinOrderAlertData:
    properties:
      config_id:
        type: string
      order:
        additionalProperties: {}
        type: object
      tenant_id:
        type: string
      trader_id:
        type: string
    required:
    - config_id
    - order
    - tenant_id
    - trader_id
    type: object
  db.CoinOrderCmsDto:
    properties:
      config_id:
        example: 671dfc49f06ba89b1821cc5a
        type: string
      order:
        additionalProperties: {}
        type: object
      order_id:
        example: 671dfc49f06ba89b1821cc5a
        type: string
      trader_id:
        example: 671dfc49f06ba89b1821cc5a
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.CoinOrderCmsReportChartInfo:
    properties:
      name:
        type: string
      total_fee:
        type: number
      total_order:
        type: number
      total_token:
        type: number
      total_volume:
        type: number
    type: object
  db.CoinOrderCmsReportDto:
    properties:
      charts:
        items:
          $ref: '#/definitions/db.CoinOrderCmsReportChartInfo'
        type: array
      summary:
        $ref: '#/definitions/db.CoinOrderCmsReportSummaryInfo'
      summary_24h:
        $ref: '#/definitions/db.CoinOrderCmsReportSummary24HInfo'
    type: object
  db.CoinOrderCmsReportSummary24HInfo:
    properties:
      total_fee:
        type: number
      total_order:
        type: number
      total_token:
        type: number
      total_token_exchange:
        type: number
      total_volume:
        type: number
      total_volume_exchange:
        type: number
    type: object
  db.CoinOrderCmsReportSummaryInfo:
    properties:
      total_fee:
        type: number
      total_order:
        type: number
      total_token:
        type: number
      total_volume:
        type: number
    type: object
  db.M:
    additionalProperties: {}
    type: object
  db.RoleBaseDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      name:
        example: Aloha
        type: string
      role_id:
        example: 671db9eca1f1b1bdbf3d4617
        type: string
    type: object
  db.RoleCmsData:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      name:
        example: Aloha
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        minItems: 1
        type: array
    required:
    - data_status
    - name
    - permissions
    type: object
  db.RoleCmsDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      name:
        example: Aloha
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        type: array
      role_id:
        example: 671db9eca1f1b1bdbf3d4617
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.StrategyAttributeInfo:
    properties:
      default: {}
      key:
        type: string
      title:
        type: string
      type:
        type: string
      values: {}
    required:
    - key
    - title
    - type
    type: object
  db.StrategyCmsData:
    properties:
      attributes:
        items:
          $ref: '#/definitions/db.StrategyAttributeInfo'
        type: array
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      description:
        example: Description
        type: string
      filename:
        example: strategy_1.py
        type: string
      name:
        example: Aloha
        type: string
    required:
    - attributes
    - data_status
    - description
    - filename
    - name
    type: object
  db.StrategyCmsDto:
    properties:
      attributes:
        items:
          $ref: '#/definitions/db.StrategyAttributeInfo'
        type: array
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      description:
        example: Description
        type: string
      filename:
        example: strategy_1.py
        type: string
      name:
        example: Aloha
        type: string
      strategy_id:
        example: 671db9eca1f1b1bdbf3d4627
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.TenantCmsData:
    properties:
      address:
        example: Aloha City
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      keycode:
        example: aloha
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      username:
        example: aloha
        type: string
    required:
    - address
    - data_status
    - email
    - keycode
    - name
    - phone
    - username
    type: object
  db.TenantCmsDto:
    properties:
      address:
        example: Aloha City
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      keycode:
        example: aloha
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      tenant_id:
        example: 671dfc49f06ba89b1811cc5a
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      username:
        example: aloha
        type: string
    type: object
  db.TraderBaseDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      exchange:
        $ref: '#/definitions/enum.Exchange'
      name:
        example: Aloha
        type: string
      sandbox:
        type: boolean
      trader_id:
        example: 671db9eca1f1b1bdbf3d4611
        type: string
    type: object
  db.TraderCmsData:
    properties:
      api_key:
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      exchange:
        $ref: '#/definitions/enum.Exchange'
      name:
        example: Aloha
        type: string
      password:
        type: string
      sandbox:
        type: boolean
      secret:
        type: string
    required:
    - api_key
    - data_status
    - exchange
    - name
    - secret
    type: object
  db.TraderCmsDto:
    properties:
      api_key:
        example: api_key
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      exchange:
        $ref: '#/definitions/enum.Exchange'
      name:
        example: Aloha
        type: string
      password:
        example: password
        type: string
      sandbox:
        type: boolean
      secret:
        example: secret
        type: string
      trader_id:
        example: 671db9eca1f1b1bdbf3d4611
        type: string
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.UserCmsData:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      role_ids:
        example:
        - 671db9eca1f1b1bdbf3d4617
        items:
          type: string
        minItems: 1
        type: array
      username:
        example: aloha
        type: string
    required:
    - data_status
    - email
    - name
    - phone
    - role_ids
    - username
    type: object
  db.UserCmsDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      role_ids:
        example:
        - 671db9eca1f1b1bdbf3d4617
        items:
          type: string
        type: array
      updated_at:
        example: "2006-01-02T15:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      user_id:
        example: 671db9eca1f1b1bdbf3d4618
        type: string
      username:
        example: aloha
        type: string
    type: object
  ecode.Error:
    properties:
      error:
        type: string
      error_description:
        type: string
    type: object
  enum.DataAction:
    enum:
    - create
    - update
    - delete
    - reset_password
    type: string
    x-enum-varnames:
    - DataActionCreate
    - DataActionUpdate
    - DataActionDelete
    - DataActionResetPassword
  enum.DataStatus:
    enum:
    - enable
    - disable
    type: string
    x-enum-varnames:
    - DataStatusEnable
    - DataStatusDisable
  enum.Exchange:
    enum:
    - binance
    - bitget
    - bybit
    - cex
    - gate
    - mexc
    - probit
    type: string
    x-enum-varnames:
    - ExchangeBinance
    - ExchangeBitget
    - ExchangeBybit
    - ExchangeCex
    - ExchangeGate
    - ExchangeMexc
    - ExchangeProbit
  enum.MarginMode:
    enum:
    - cross
    - isolated
    type: string
    x-enum-varnames:
    - MarginModeCross
    - MarginModeIsolated
  enum.MarketType:
    enum:
    - spot
    - margin
    type: string
    x-enum-varnames:
    - MarketTypeSpot
    - MarketTypeMargin
  enum.OrderStatus:
    enum:
    - open
    - closed
    type: string
    x-enum-varnames:
    - OrderStatusOpen
    - OrderStatusClosed
  enum.Permission:
    enum:
    - system_setting
    - system_audit_log
    - client_view
    - client_create
    - client_delete
    - role_view
    - role_create
    - role_update
    - user_view
    - user_create
    - user_update
    - tenant_view
    - tenant_create
    - tenant_update
    - coin_view
    - coin_create
    - coin_update
    - strategy_view
    - strategy_create
    - strategy_update
    - trader_view
    - trader_create
    - trader_update
    type: string
    x-enum-varnames:
    - PermissionSystemSetting
    - PermissionSystemAuditLog
    - PermissionClientView
    - PermissionClientCreate
    - PermissionClientDelete
    - PermissionRoleView
    - PermissionRoleCreate
    - PermissionRoleUpdate
    - PermissionUserView
    - PermissionUserCreate
    - PermissionUserUpdate
    - PermissionTenantView
    - PermissionTenantCreate
    - PermissionTenantUpdate
    - PermissionCoinView
    - PermissionCoinCreate
    - PermissionCoinUpdate
    - PermissionStrategyView
    - PermissionStrategyCreate
    - PermissionStrategyUpdate
    - PermissionTraderView
    - PermissionTraderCreate
    - PermissionTraderUpdate
  enum.ServerStatus:
    enum:
    - "on"
    - "off"
    type: string
    x-enum-varnames:
    - ServerStatusOn
    - ServerStatusOff
  tz.Timezone:
    enum:
    - UTC
    - Local
    - Asia/Ho_Chi_Minh
    type: string
    x-enum-varnames:
    - UTC
    - Local
    - AsiaHoChiMinh
info:
  contact: {}
  title: Document APIs
paths:
  /agent/v1/coins/configs:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.CoinConfigStrategyDto'
            type: array
      security:
      - BasicAuth: []
      summary: List Configs
      tags:
      - Agent
  /agent/v1/coins/configs/{config_id}/server-status:
    put:
      parameters:
      - description: config_id
        in: path
        name: config_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.CoinConfigServerInfo'
      responses:
        "200":
          description: OK
      security:
      - BasicAuth: []
      summary: Update Server Status
      tags:
      - Agent
  /agent/v1/coins/orders:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.CoinOrderAlertData'
      responses:
        "200":
          description: OK
      security:
      - BasicAuth: []
      summary: Create Order
      tags:
      - Agent
  /auth/v1/change-password:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthChangePasswordData'
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
  /auth/v1/flush-cache:
    get:
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Flush Cache
      tags:
      - Auth
  /auth/v1/login:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthLoginData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthTokenDto'
      summary: Login
      tags:
      - Auth
  /auth/v1/logout:
    post:
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Auth
  /auth/v1/me:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthSessionDto'
      security:
      - BearerAuth: []
      summary: Get Me
      tags:
      - Auth
  /auth/v1/refresh-token:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthRefreshTokenData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthTokenDto'
      summary: Refresh Token
      tags:
      - Auth
  /cms/v1/auditlogs:
    get:
      parameters:
      - in: query
        name: domain_id
        type: string
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - in: query
        name: name
        type: string
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.AuditLogCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Audit Logs
      tags:
      - Cms
  /cms/v1/clients:
    get:
      parameters:
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.ClientCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Clients
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.ClientCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ClientCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Client
      tags:
      - Cms
  /cms/v1/clients/{client_id}:
    delete:
      parameters:
      - description: client_id
        in: path
        name: client_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ClientCmsDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Delete Client
      tags:
      - Cms
  /cms/v1/coins/configs:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.CoinConfigCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Configs
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.CoinConfigCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CoinConfigCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Config
      tags:
      - Cms
  /cms/v1/coins/configs/{config_id}:
    put:
      parameters:
      - description: config_id
        in: path
        name: config_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.CoinConfigCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CoinConfigCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update Config
      tags:
      - Cms
  /cms/v1/coins/exchanges:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/enum.Exchange'
            type: array
      security:
      - BearerAuth: []
      summary: List Exchanges
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/balances:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - enum:
        - spot
        - margin
        in: query
        name: market_type
        required: true
        type: string
        x-enum-varnames:
        - MarketTypeSpot
        - MarketTypeMargin
      - in: query
        name: sandbox
        type: boolean
      - in: query
        name: trader_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Balance'
            type: array
      security:
      - BearerAuth: []
      summary: List Balances
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/currencies:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Currency'
            type: array
      security:
      - BearerAuth: []
      summary: List Currencies
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/markets:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - enum:
        - spot
        - margin
        in: query
        name: market_type
        required: true
        type: string
        x-enum-varnames:
        - MarketTypeSpot
        - MarketTypeMargin
      - in: query
        name: sandbox
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Market'
            type: array
      security:
      - BearerAuth: []
      summary: List Markets
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/ohlcvs:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      - in: query
        name: symbol
        required: true
        type: string
      - in: query
        name: timeframe
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.OHLCV'
            type: array
      security:
      - BearerAuth: []
      summary: List OHLCVs
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/orderbook:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      - in: query
        name: symbol
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coin.OrderBook'
      security:
      - BearerAuth: []
      summary: Get OrderBook
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/orders:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      - in: query
        name: symbol
        required: true
        type: string
      - in: query
        name: trader_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Order'
            type: array
      security:
      - BearerAuth: []
      summary: List Orders
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/symbols:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List Symbols
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/tickers:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      - collectionFormat: csv
        in: query
        items:
          type: string
        minItems: 1
        name: symbols
        required: true
        type: array
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Ticker'
            type: array
      security:
      - BearerAuth: []
      summary: List Tickers
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/timeframes:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List Timeframes
      tags:
      - Cms
  /cms/v1/coins/exchanges/{exchange_id}/trades:
    get:
      parameters:
      - description: exchange_id
        enum:
        - binance
        - bitget
        - bybit
        - cex
        - gate
        - mexc
        - probit
        in: path
        name: exchange_id
        required: true
        type: string
      - in: query
        name: sandbox
        type: boolean
      - in: query
        name: symbol
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coin.Trade'
            type: array
      security:
      - BearerAuth: []
      summary: List Trades
      tags:
      - Cms
  /cms/v1/coins/orders:
    get:
      parameters:
      - in: query
        name: config_id
        type: string
      - example: "2006-01-02"
        in: query
        name: end_date
        required: true
        type: string
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      - example: "2006-01-02"
        in: query
        name: start_date
        required: true
        type: string
      - enum:
        - open
        - closed
        in: query
        name: status
        type: string
        x-enum-varnames:
        - OrderStatusOpen
        - OrderStatusClosed
      - in: query
        name: trader_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.CoinOrderCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Orders
      tags:
      - Cms
  /cms/v1/coins/reports:
    get:
      parameters:
      - in: query
        name: config_id
        type: string
      - example: "2006-01-02"
        in: query
        name: end_date
        required: true
        type: string
      - example: "2006-01-02"
        in: query
        name: start_date
        required: true
        type: string
      - in: query
        name: trader_id
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.CoinOrderCmsReportDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Reports
      tags:
      - Cms
  /cms/v1/coins/strategies:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.StrategyCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Strategies
      tags:
      - Cms
  /cms/v1/coins/traders:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.TraderBaseDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Traders
      tags:
      - Cms
  /cms/v1/roles:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.RoleCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Roles
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.RoleCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.RoleCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Role
      tags:
      - Cms
  /cms/v1/roles/{role_id}:
    put:
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.RoleCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.RoleCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - Cms
  /cms/v1/strategies:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.StrategyCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Strategies
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.StrategyCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.StrategyCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Strategy
      tags:
      - Cms
  /cms/v1/strategies/{strategy_id}:
    put:
      parameters:
      - description: strategy_id
        in: path
        name: strategy_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.StrategyCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.StrategyCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update Strategy
      tags:
      - Cms
  /cms/v1/tenants:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.TenantCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Tenants
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TenantCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Tenant
      tags:
      - Cms
  /cms/v1/tenants/{tenant_id}:
    put:
      parameters:
      - description: tenant_id
        in: path
        name: tenant_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TenantCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update Tenant
      tags:
      - Cms
  /cms/v1/tenants/{tenant_id}/reset-password:
    post:
      parameters:
      - description: tenant_id
        in: path
        name: tenant_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Reset Password For Tenant
      tags:
      - Cms
  /cms/v1/traders:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.TraderCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Traders
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TraderCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TraderCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create Trader
      tags:
      - Cms
  /cms/v1/traders/{trader_id}:
    put:
      parameters:
      - description: trader_id
        in: path
        name: trader_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TraderCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TraderCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update Trader
      tags:
      - Cms
  /cms/v1/users:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: role_id
        type: string
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.UserCmsDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Cms
  /cms/v1/users/{user_id}:
    put:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ecode.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Cms
  /cms/v1/users/{user_id}/reset-password:
    post:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ecode.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ecode.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ecode.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Reset Password For User
      tags:
      - Cms
  /cms/v1/users/roles:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.RoleBaseDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Roles
      tags:
      - Cms
  /rest/v1/metas:
    get:
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ecode.Error'
      security:
      - BearerAuth: []
      summary: Get Metas
      tags:
      - Rest
  /storage/v1/images:
    post:
      parameters:
      - description: files
        in: formData
        name: files
        required: true
        type: file
      responses: {}
      security:
      - BearerAuth: []
      summary: Upload Image
      tags:
      - Storage
  /storage/v1/images/{filename}:
    get:
      parameters:
      - description: filename
        in: path
        name: filename
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      summary: Download Image
      tags:
      - Storage
  /storage/v1/videos:
    post:
      parameters:
      - description: files
        in: formData
        name: files
        required: true
        type: file
      responses: {}
      security:
      - BearerAuth: []
      summary: Upload Video
      tags:
      - Storage
  /storage/v1/videos/{filename}:
    get:
      parameters:
      - description: filename
        in: path
        name: filename
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      summary: Download Video
      tags:
      - Storage
  /test/v1:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthLoginData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthLoginData'
      security:
      - BearerAuth: []
      summary: Test
      tags:
      - Test
  /webhook/v1:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.M'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.M'
      security:
      - BasicAuth: []
      summary: Webhook
      tags:
      - Webhook
  /websocket/v1:
    get:
      responses:
        "101":
          description: Switching Protocols
      security:
      - BearerAuth: []
      summary: Websocket
      tags:
      - Websocket
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    in: Header
    name: Authorization
    type: apiKey
swagger: "2.0"
